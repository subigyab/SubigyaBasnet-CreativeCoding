var particle = [];
var flipbg = 1;
var newPosX, newPosY;
var funcCheck = 0;
var colo, colo1;
var check1 = 0;


function setup() {
  createCanvas(500, 300);
  background(0);
  for (var i = 0; i < 50; i++) {
    particle[i] = new Particle;
  }
}

function draw() {
  background(0);
  noStroke();
  for (var i = 0; i < particle.length; i++) {
    particle[i].displayF();
    particle[i].updateF();
    particle[i].checkF();
    var colo = map(particle[i].x, 0, width, 0, 255);
    var colo1 = map(particle[i].y, 0, height, 0, 255);
    for (var j = 0; j < particle.length; j++) {
      if (particle[i].intersects(particle[j]) && i != j) {
        // console.log("Line");
        push();
        noFill();
        stroke(255 - colo, colo1, (colo + colo1) / 2, 30);
        // strokeWeight(5);
        if(particle[i].check2===1){
          line(particle[i].x, particle[i].y, particle[j].x, particle[j].y);
        }
        
        pop();
      }
    }
  }
}

function mousePressed() {
  newPosX = mouseX;
  newPosY = mouseY;


  if (funcCheck === 0) {
    funcCheck = 1;
    check1=0;
  } else if (funcCheck === 1) {
    check1 = 1;
    funcCheck = 0;
  }

  for (var i = 0; i < particle.length; i++) {
    particle[i].mPressed();
  }




}

function Particle() {
  this.x = random(0, width);
  this.y = random(0, height);
  this.diameter = 3;
  this.xMod = random(-5, 5);
  this.yMod = random(-5, 5);
  this.xCent = 1;
  this.yCent = 1;
  this.check2 = 1;
  this.displayF = function() {

    if (funcCheck === 0 && this.check2===1) {
      noFill();
      noStroke();
      ellipse(this.x, this.y, this.diameter, this.diameter);
    } else {
      colo = map(this.x, 0, width, 0, 255);
      colo1 = map(this.y, 0, height, 0, 255);
      stroke(255 - colo, colo1, (colo + colo1) / 2, 80);
      ellipse(this.x, this.y, this.diameter * 2, this.diameter * 2);
    }

  }

  this.updateF = function() {

    if (funcCheck === 0) {
      this.x += this.xMod;
      this.y += this.yMod;
    } else if (funcCheck === 1) {

      var dis = dist(this.x, this.y, newPosX, newPosY);
      var angValue = (this.y - newPosY) / (this.x - newPosX);
      var angle = atan(angValue);
      this.xNew = dis * cos(angle) * this.xCent / 50;
      this.yNew = dis * sin(angle) * this.yCent / 50;
      if (this.x != newPosX) {
        this.x += this.xNew;
        this.y += this.yNew;
      }

    }

  }

  this.checkF = function() {

    if (this.x + this.diameter / 2 > width || (this.x - this.diameter / 2) < 0) {
      this.xMod *= (-1);
      if (check1 === 1) {
        this.check2 = 1;
        // console.log("xMod limit and check 2 is"+this.check2);
      }
    } else if (this.y + this.diameter / 2 > height || (this.y - this.diameter / 2) < 0) {
      this.yMod *= (-1);
      if (check1 === 1) {
        this.check2 = 1;
        // console.log("yMod limit of and check 2 is"+this.check2);
      }
    }
  }

  this.intersects = function(other) {

    var d = dist(this.x, this.y, other.x, other.y);
    if (this.check2 === 1) {
      if (funcCheck === 0) {
        if (d < 100) {
          return true;
        } else {
          return false;
        }
      } 
      
    }



  }
  this.mPressed = function() {
    if (this.x - newPosX > 0 && this.y - newPosY < 0) {
      this.xCent = -1;
      this.yCent = -1;
    } else if (this.x - newPosX > 0 && this.y - newPosY > 0) {
      this.xCent = -1;
      this.yCent = -1;
    } else if (this.x - newPosX < 0 && this.y - newPosY > 0) {
      this.xCent = 1;
      this.yCent = 1;
    } else if (this.x - newPosX < 0 && this.y - newPosY < 0) {
      this.xCent = 1;
      this.yCent = 1;
    }
    this.check2 = 0;
  }
}
